<?php
/**
 * Created by PhpStorm.
 * User: Adminstrator
 * Date: 2017/4/15
 * Time: 22:46
 */

namespace app\admin\model;


use app\common\model\AuthorityModel;
use think\Db;
use think\Model;

class RoleModel extends Model
{
    protected $name = 'role', $authority_model, $menu_model;

    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
        $this->authority_model = new AuthorityModel();
        $this->menu_model = new MenuModel();
    }

    /**
     * 根据ID获取角色信息
     * @param $id string
     * @return array
     */
    public function by_id_role($id)
    {
        return $this->where('id', $id)->find()->toArray();
    }

    /**
     * 获取角色列表
     * @param $p string
     * @param $size string
     * @return array
     */
    public function get_role_list($p, $size)
    {
        $tmp = [];
        $tmp['status'] = ['egt', -1];
        if ($size === false) {
            $limit = false;
        } else {
            $start = ($p - 1) * $size;
            $limit = "$start, $size";
            $count = $this->where($tmp)->count();
            $page = ($count / $size);
        }

        $role_obj = $this->where($tmp)->limit($limit)->order('sort')->select();
        $data = [];
        foreach ($role_obj as $index => $item) {
            $data[] = $item;
        }
        $list['list'] = $data;
        $list['page'] = $page?:1;
        return $list;
    }

    /**
     * 添加角色
     * @param $data array
     * @return bool
     */
    public function add_role($data)
    {
        if (empty($data)) {
            return false;
        }
        $insert = $this->insert($data);
        if (!$insert) {
            return false;
        }
        return true;
    }

    /**
     * 编辑角色
     * @param $data array
     * @return bool
     */
    public function edit_role($data)
    {
        $id = $data['id'];
        unset($data['id']);
        $save = $this->save($data, ['id' => $id]);
        if ($save === false) {
            return false;
        }
        return true;
    }

    /**
     * 获取菜单列表用户权限编辑
     * @param $data array
     * @param $role_id string
     * @param $level int
     * @return array
     */
    public function create_role($data = [], $role_id, $level)
    {
        if (empty($data)) {
            $data = $this->menu_model->get_tree(0);
        }
        $auth_menu_ids = $this->authority_model->by_role_id($role_id);
        if ($level == 0) {
            $start_label = "<li>";
            $end_label = "</li>";
        } elseif ($level > 0) {
            if ($level % 2 == 0) {
                $start_label = "<dd>";
                $end_label = "</dd>";
            } else {
                $start_label = "<dl>";
                $end_label = "</dl>";
            }
        }
        $tmp = "";
        foreach ($data as $index => $item) {
            if (!empty($auth_menu_ids) && in_array($item['id'], $auth_menu_ids)) {
                $tmp .= $start_label . "<input type='checkbox' checked name='role[{$item['id']}]' value='{$item['url']}' title='{$item['name']}' lay-filter='role'/>";
            } else {
                $tmp .= $start_label . "<input type='checkbox' name='role[{$item['id']}]' value='{$item['url']}' title='{$item['name']}' lay-filter='role'/>";
            }
            if (!empty($item['sub'])) {
                $tmp .= $this->create_role($item['sub'], $role_id, $level + 1);
            }
            $tmp .= $end_label;
        }
        return $tmp;
    }

    /**
     * 检查排序是否重复
     * @param $id string
     * @param $sort string
     * @return bool
     */
    public function check_order($id, $sort)
    {
        $data = $this->where('id', $id)->select();
        if ($data) {
            foreach ($data as $index => $item) {
                if ($sort == $item['sort']) {
                    return false;
                    break;
                }
            }
        }
        return true;
    }

    /**
     * 添加角色用户
     * @param $data array
     * @param $role_id string
     * @return bool
     */
    public function add_role_admin($data, $role_id)
    {
        $count = $this->authority_model->where(['role_id' => $role_id])->count();
        if ($count > 0) {
            // 启动事务
            $this->authority_model->startTrans();
            try {
                $this->authority_model->where('role_id', $role_id)->delete();
                $this->authority_model->insertAll($data);
                // 提交事务
                $this->authority_model->commit();
                return true;
            } catch (\Exception $e) {
                // 回滚事务
                $this->authority_model->rollback();
                return false;
            }
        } else {
            $add = $this->authority_model->insertAll($data);
            if ($add) {
                return true;
            }
        }
        return false;
    }

    /**
     * 删除角色权限
     * @param $role_id string
     * @return bool
     */
    public function del_role_admin($role_id)
    {
        $count = Db::name('role_admin')->where(['role_id' => $role_id])->count();
        //如果该角色权限就删除他的所有权限，没有就直接返回true;
        if ($count > 0) {
            $del = Db::name('role_admin')->where('role_id', $role_id)->delete();
            if ($del) {
                return true;
            }
            return false;
        }
        return true;
    }
}