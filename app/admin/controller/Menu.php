<?php
/**
 * Created by PhpStorm.
 * User: Adminstrator
 * Date: 2017/4/10
 * Time: 20:28
 */

namespace app\admin\controller;


use app\admin\model\MenuModel;
use app\common\controller\AdminBase;
use app\common\Tools\AjaxCode;
use app\common\Tools\LogUtils;
use think\Db;

class Menu extends AdminBase
{
    protected $menu_model,$authority;

    public function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
        $this->menu_model = new MenuModel();
    }

    /**
     * 菜单列表页面
     */
    public function index()
    {
        return $this->fetch();
    }

    /**
     * 获取菜单列表
     */

    public function lists()
    {
        $p = $this->request->param('p');

        if ($p < 1 || !is_numeric($p)) {
            $p = 1;
        }
        $size = 3;
        $list = $this->menu_model->get_menu_list(0,$p,$size);
        $count = $this->menu_model->where("menu_pid = 0")->count();
        $data = [
            'status' => 200,
            'msg'    => '获取成功',
            'data'   => ['list' => $list,],
            'pages'  => ceil($count / $size),
        ];

        return json($data);
    }

    /**
     * 增加菜单
     */
    public function add()
    {
        $pid = $this->request->get('id');
        $tree = $this->menu_model->create_option($pid);
        $this->assign('tree', $tree);
        return $this->fetch();
    }
    /**
     * 增加菜单提交
     */

    public function add_post()
    {
        $post = $this->request->post();
        $data = [];
        array_walk($post, function (&$val, $key) use (&$data) {
            $key = "menu_" . $key;
            $data[$key] = $val;
        });
        if (array_key_exists('menu_state', $data)) {
            if ($data['menu_state'] == 'on') $data['menu_state'] = '0'; else$data['menu_state'] = '1';
        }
        if (array_key_exists('menu_ban', $data)) {
            if ($data['menu_ban'] == 'on') $data['menu_ban'] = '0'; else$data['menu_ban'] = '1';
        }
        if (!check_number($data['menu_pid'])) {
            $json = [
                'status' => AjaxCode::PARAM_VALID,
                'msg'    => '参数错误！',
            ];
            return json($json);
        }
        if (empty($data['menu_title']) || empty($data['menu_app'])) {
            $json = [
                'status' => AjaxCode::PARAM_EMPTY,
                'msg'    => '参数为空！',
            ];
            return json($json);
        }
        if (!check_number($data['menu_state'])) {
            $json = [
                'status' => AjaxCode::PARAM_VALID,
                'msg'    => '状态参数错误！',
            ];
            return json($json);
        }
        if (!check_number($data['menu_ban'])) {
            $json = [
                'status' => AjaxCode::PARAM_VALID,
                'msg'    => '操作参数错误！',
            ];
            return json($json);
        }
        if (!check_number($data['menu_type'])) {
            $json = [
                'status' => AjaxCode::PARAM_VALID,
                'msg'    => '状态参数错误！',
            ];
            return json($json);
        }
        $add = $this->menu_model->add_menu($data);
        if (!$add) {
            $json = [
                'status' => AjaxCode::FAIL,
                'msg'    => '处理失败！',
                'url'    => '',
            ];
            return json($json);
        }
        return json(['status' => AjaxCode::SUCCESS, 'msg' => '','url' => 'reload']);
    }

    /**
     * 编辑菜单
     */
    public function edit()
    {
        $id = $this->request->param('id');
        $list = $this->menu_model->by_id_get($id);
        $tree = $this->menu_model->create_option($list['pid']);
        $this->assign('list', $list);
        $this->assign('tree', $tree);
        return $this->fetch();
    }

    /**
     * 编辑菜单
     */
    public function edit_post()
    {
        $post = $this->request->post();
        $data = [];
        array_walk($post, function (&$val, $key) use (&$data) {
            $key = $key == 'id' ? $key : "menu_" . $key;
            $data[$key] = $val;
        });

        if (array_key_exists('menu_state', $data) && $data['menu_state'] == 'on') {
            $data['menu_state'] = '0';
        } else {
            $data['menu_state'] = '1';
        }
        if (array_key_exists('menu_ban', $data) && $data['menu_ban'] == 'on') {
           $data['menu_ban'] = '0';
        } else {
            $data['menu_ban'] = '1';
        }
        if (!check_id($data['id'])) {
            $json = [
                'status' => AjaxCode::PARAM_VALID,
                'msg'    => '参数错误！',
            ];
            return json($json);
        }
        if (!check_number($data['menu_pid'])) {
            $json = [
                'status' => AjaxCode::PARAM_VALID,
                'msg'    => 'PID参数错误！',
            ];
            return json($json);
        }
        if (empty($data['menu_title']) || empty($data['menu_app'])) {
            $json = [
                'status' => AjaxCode::PARAM_EMPTY,
                'msg'    => '参数为空！',
            ];
            return json($json);
        }
        if (!check_number($data['menu_state'])) {
            $json = [
                'status' => AjaxCode::PARAM_VALID,
                'msg'    => '状态参数错误！',
            ];
            return json($json);
        }
        if (!check_number($data['menu_ban'])) {
            $json = [
                'status' => AjaxCode::PARAM_VALID,
                'msg'    => '操作参数错误！',
            ];
            return json($json);
        }
        if (!check_number($data['menu_type'])) {
            $json = [
                'status' => AjaxCode::PARAM_VALID,
                'msg'    => '状态参数错误！',
            ];
            return json($json);
        }
        $edit = $this->menu_model->edit_menu($data);
        if (!$edit) {
            $json = [
                'status' => AjaxCode::FAIL,
                'msg'    => '处理失败！',
            ];
            return json($json);
        }
        return json(['status' => AjaxCode::SUCCESS, 'msg' => '','url' => 'reload']);
    }

    /**
     * 编辑菜单
     */
    public function delete()
    {
        $id = $this->request->param('id');
        if (!check_id($id)) {
            $json = [
                'status' => AjaxCode::PARAM_VALID,
                'msg'  => '参数错误！',
            ];
            return json($json);
        }
        $count = Db::name('menu')->where(['menu_pid' => $id])->count();
        if ($count > 0) {
            $json = [
                'status' => AjaxCode::FAIL,
                'msg'  => '该菜单下还有子菜单，无法删除！',
            ];
            return json($json);
        }
        $del = $this->menu_model->delete_menu($id);
        if (!$del) {
            $json = [
                'status' => AjaxCode::FAIL,
                'msg'  => '处理失败！',
            ];
            return json($json);
        }
        return json(['status' => AjaxCode::SUCCESS, 'msg'  => '处理成功!','url'=>'reload']);
    }

    /**
     * 设置菜单排序
     */
    public function set_sort()
    {
        $id = $this->request->param('id');
        $sort = $this->request->param('sort');
        if (empty($id) || !check_id($id)) {
            return json(['status' => AjaxCode::PARAM_VALID, 'msg' => '参数错误！']);
        }
        if (!check_number($sort)) {
            return json(['status' => AjaxCode::PARAM_VALID, 'msg' => '排序参数错误！']);
        }


        $check_sort = $this->menu_model->check_order($id, $sort);
        if (!$check_sort) { //检查pid同级下的排序是否冲突
            return json(['status' => AjaxCode::DATA_EXIST, 'msg' => '排序起冲突！']);
        }
        $edit_sort = Db::name('menu')->where('id', $id)->setField('menu_sort', $sort);
        if ($edit_sort === false) {
            return json(['status' => AjaxCode::FAIL, 'msg' => '处理失败！']);
        } else {
            return json(['status' => AjaxCode::SUCCESS, 'msg' => '处理成功！']);
        }
    }

    /**
     * 设置菜单状态
     */
    public function set_status()
    {
        $id = $this->request->param('id');
        $state = $this->request->param('state');
        if (empty($id) || !check_id($id)) {
            return json(['status' => AjaxCode::PARAM_VALID, 'msg' => '参数错误！']);
        }
        switch ($state) {
            case 'on':
                $status = 0;
                break;
            case 'false':
                $status = 1;
                break;
            default:
                return json(['status' => AjaxCode::PARAM_VALID, 'msg' => '状态参数错误！']);
                break;
        }
        $edit_state = Db::name('menu')->where('id', $id)->setField('menu_state', $status);
        if ($edit_state === false) {
            return json(['status' => AjaxCode::FAIL, 'msg' => '处理失败！']);
        } else {
            return json(['status' => AjaxCode::SUCCESS, 'msg' => '处理成功！']);
        }
    }
    public function test(){
        LogUtils::log('{"jkdsfj":"dsfmsdfl"}','pay','alipay');
    }
}