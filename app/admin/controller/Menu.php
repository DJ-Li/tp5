<?php
/**
 * Created by PhpStorm.
 * User: Adminstrator
 * Date: 2017/4/10
 * Time: 20:28
 */

namespace app\admin\controller;


use app\admin\model\MenuModel;
use app\common\controller\AdminBase;
use app\common\Tools\AjaxCode;
use app\common\Tools\LogUtils;
use think\Db;

class Menu extends AdminBase
{
    protected $menu_model, $authority;

    public function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
        $this->menu_model = new MenuModel();
    }

    /**
     * 菜单列表页面
     */
    public function index()
    {
        return $this->fetch();
    }

    /**
     * 获取菜单列表
     */

    public function lists()
    {
        $p = $this->request->param('p');
        if ($p < 1 || !is_numeric($p)) {
            $p = 1;
        }
        $data['list'] = $this->menu_model->get_menu_list(0, $p, $this->size);
        $count = $this->menu_model->where("menu_pid = 0")->count();
        if (!empty($data)) {
            return self::json(AjaxCode::SUCCESS, '获取成功', $data, ceil($count / $this->size));
        } else {
            return self::json(AjaxCode::FAIL, '获取失败');
        }
    }

    /**
     * 增加菜单
     */
    public function add()
    {
        if ($this->request->isPost()) {//提交数据
            $post = $this->request->post();
            $data = [];
            array_walk($post, function (&$val, $key) use (&$data) {
                $key = $key == 'status' ? $key : "menu_" . $key;
                $data[$key] = trim($val);
            });
            if (array_key_exists('status', $data) && $data['status'] == 'on') {
                $data['status'] = '1';
            } else {
                $data['status'] = '-1';
            }
            if (array_key_exists('menu_ban', $data) && $data['menu_ban'] == 'on') {
                $data['menu_ban'] = '1';
            } else {
                $data['menu_ban'] = '-1';
            }
            if (!check_id($data['menu_pid'])) {
                return self::json(AjaxCode::PARAM_ERROR, '参数错误！');
            }
            if (empty($data['menu_title']) || empty($data['menu_app'])) {
                return self::json(AjaxCode::PARAM_EMPTY, '参数为空！');
            }
            if (!check_number($data['status'])) {
                return self::json(AjaxCode::PARAM_ERROR, '状态参数错误！');
            }
            if (!check_number($data['menu_ban'])) {
                return self::json(AjaxCode::PARAM_ERROR, '操作参数错误！');
            }
            if (!check_number($data['menu_type'])) {
                return self::json(AjaxCode::PARAM_ERROR, '认证状态参数错误！');
            }
            $add = $this->menu_model->add_menu($data);
            if (!$add) {
                return self::json(AjaxCode::FAIL, '处理失败！', [],0, '');
            }
            return self::json(AjaxCode::SUCCESS, '', [],0, 'reload');
        }
        $pid = $this->request->get('id');
        $tree = $this->menu_model->create_option($pid);
        $this->assign('tree', $tree);
        return $this->fetch();
    }

    /**
     * 编辑菜单
     */
    public function edit()
    {
        if ($this->request->isPost()) { //提交数据
            $post = $this->request->post();
            $data = [];
            array_walk($post, function (&$val, $key) use (&$data) {
                $key = $key == 'id' ? $key : "menu_" . $key;
                $data[$key] = trim($val);
            });
            if (array_key_exists('status', $data) && $data['status'] == 'on') {
                $data['status'] = '-1';
            } else {
                $data['status'] = '1';
            }
            if (array_key_exists('menu_ban', $data) && $data['menu_ban'] == 'on') {
                $data['menu_ban'] = '0';
            } else {
                $data['menu_ban'] = '1';
            }
            if (!check_id($data['id'])) {
                return self::json(AjaxCode::PARAM_ERROR, '参数错误！');
            }
            if (!check_number($data['menu_pid'])) {
                return self::json(AjaxCode::PARAM_ERROR, 'PID参数错误！');
            }
            if (empty($data['menu_title']) || empty($data['menu_app'])) {
                return self::json(AjaxCode::PARAM_EMPTY, '参数为空！');
            }
            if (!check_number($data['status'])) {
                return self::json(AjaxCode::PARAM_ERROR, '状态参数错误！');
            }
            if (!check_number($data['menu_ban'])) {
                return self::json(AjaxCode::PARAM_ERROR, '操作参数错误！');
            }
            if (!check_number($data['menu_type'])) {
                return self::json(AjaxCode::PARAM_ERROR, '状态参数错误！');
            }
            $edit = $this->menu_model->edit_menu($data);
            if (!$edit) {
                return self::json(AjaxCode::FAIL, '处理失败！');
            }
            return self::json(AjaxCode::SUCCESS, '', [],0, 'reload');
        }
        $id = $this->request->param('id');
        $list = $this->menu_model->by_id_get($id);
        $tree = $this->menu_model->create_option($list['pid']);
        $this->assign('list', $list);
        $this->assign('tree', $tree);
        return $this->fetch();
    }

    /**
     * 编辑菜单
     */
    public function del()
    {
        $id = $this->request->param('id');
        if (!check_id($id)) {
            return self::json(AjaxCode::PARAM_ERROR, '参数错误！');
        }
        $count = Db::name('menu')->where(['menu_pid' => $id])->count();
        if ($count > 0) {
            return self::json(AjaxCode::FAIL, '该菜单下还有子菜单，无法删除！');
        }
        $del = $this->menu_model->delete_menu($id);
        if (!$del) {
            return self::json(AjaxCode::FAIL, '处理失败！');
        }
        return self::json(AjaxCode::SUCCESS, '处理成功!', [],0, 'reload');
    }

    /**
     * 设置菜单排序
     */
    public function set_sort()
    {
        $id = $this->request->param('id');
        $sort = $this->request->param('sort');
        if (empty($id) || !check_id($id)) {
            return self::json(AjaxCode::PARAM_ERROR, '参数错误！');
        }
        if (!check_number($sort)) {
            return self::json(AjaxCode::PARAM_ERROR, '排序参数错误！');
        }
        $check_sort = $this->menu_model->check_order($id, $sort);
        //检查pid同级下的排序是否冲突
        if (!$check_sort) {
            return self::json(AjaxCode::DATA_EXIST, '排序起冲突！');
        }
        $edit_sort = $this->menu_model->where('id', $id)->setField('menu_sort', $sort);
        if ($edit_sort === false) {
            return self::json(AjaxCode::FAIL, '处理失败！');
        } else {
            return self::json(AjaxCode::SUCCESS, '处理成功！');
        }
    }

    /**
     * 设置菜单状态
     */
    public function set_status()
    {
        $id = $this->request->param('id');
        $state = $this->request->param('state');
        if (empty($id) || !check_id($id)) {
            return self::json(AjaxCode::PARAM_ERROR, '参数错误！');
        }
        switch ($state) {
            case '1':
                $status = -1;
                break;
            case '-1':
                $status = 1;
                break;
            default:
                return self::json(AjaxCode::PARAM_ERROR, '状态参数错误！');
                break;
        }
        $edit_state = $this->menu_model->where('id', $id)->setField('status', $status);
        if ($edit_state === false) {
            return self::json(AjaxCode::FAIL, '处理失败！');
        } else {
            return self::json(AjaxCode::SUCCESS, '处理成功！');
        }
    }

    public function test()
    {
        LogUtils::log('{"jkdsfj":"dsfmsdfl"}', 'pay', 'alipay');
    }
}